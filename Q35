#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <time.h>

// Function to generate random key stream
void generate_key(int *key, int length) {
    srand(time(NULL));  // Seed for random number generator
    for (int i = 0; i < length; ++i) {
        key[i] = rand() % 27;  // Generate random number between 0 and 26
    }
}

// Function to perform Vigenère encryption
void vigenere_encrypt(char *plaintext, char *ciphertext, int *key, int length) {
    for (int i = 0; i < length; ++i) {
        if (plaintext[i] >= 'A' && plaintext[i] <= 'Z') {
            ciphertext[i] = 'A' + (plaintext[i] - 'A' + key[i]) % 26;  // Encrypt uppercase letters
        } else if (plaintext[i] >= 'a' && plaintext[i] <= 'z') {
            ciphertext[i] = 'a' + (plaintext[i] - 'a' + key[i]) % 26;  // Encrypt lowercase letters
        } else {
            ciphertext[i] = plaintext[i];  // Keep non-alphabetic characters unchanged
        }
    }
    ciphertext[length] = '\0';  // Null-terminate the ciphertext string
}

// Function to perform Vigenère decryption
void vigenere_decrypt(char *ciphertext, char *decrypted, int *key, int length) {
    for (int i = 0; i < length; ++i) {
        if (ciphertext[i] >= 'A' && ciphertext[i] <= 'Z') {
            decrypted[i] = 'A' + (ciphertext[i] - 'A' - key[i] + 26) % 26;  // Decrypt uppercase letters
        } else if (ciphertext[i] >= 'a' && ciphertext[i] <= 'z') {
            decrypted[i] = 'a' + (ciphertext[i] - 'a' - key[i] + 26) % 26;  // Decrypt lowercase letters
        } else {
            decrypted[i] = ciphertext[i];  // Keep non-alphabetic characters unchanged
        }
    }
    decrypted[length] = '\0';  // Null-terminate the decrypted string
}

int main() {
    char plaintext[] = "HelloWorld";  // Example plaintext
    int plaintext_len = strlen(plaintext);

    int key[plaintext_len];  // Array to store the key stream
    generate_key(key, plaintext_len);  // Generate random key stream

    char ciphertext[plaintext_len + 1];  // Buffer for ciphertext
    char decrypted[plaintext_len + 1];   // Buffer for decrypted text

    // Encrypt plaintext
    vigenere_encrypt(plaintext, ciphertext, key, plaintext_len);
    printf("Ciphertext: %s\n", ciphertext);

    // Decrypt ciphertext
    vigenere_decrypt(ciphertext, decrypted, key, plaintext_len);
    printf("Decrypted text: %s\n", decrypted);

    return 0;
}
