#include <stdio.h>
#include <stdlib.h>
#include <math.h>
#include <time.h>

// Function to calculate gcd of two numbers using Euclidean algorithm
int gcd(int a, int b) {
    while (b != 0) {
        int temp = b;
        b = a % b;
        a = temp;
    }
    return a;
}

// Function to perform modular exponentiation (base^exp % mod)
long long int mod_exp(long long int base, int exp, int mod) {
    long long int result = 1;
    base = base % mod;
    while (exp > 0) {
        if (exp % 2 == 1) {
            result = (result * base) % mod;
        }
        exp = exp >> 1;
        base = (base * base) % mod;
    }
    return result;
}

// Function to find modular inverse of e modulo phi using Extended Euclidean Algorithm
int mod_inverse(int e, int phi) {
    int t = 0, newt = 1;
    int r = phi, newr = e;
    while (newr != 0) {
        int quotient = r / newr;
        int temp = t;
        t = newt;
        newt = temp - quotient * newt;
        temp = r;
        r = newr;
        newr = temp - quotient * newr;
    }
    if (r > 1) return -1; // e is not invertible
    if (t < 0) t = t + phi;
    return t;
}

// Function to check if a number is prime
int is_prime(int num) {
    if (num <= 1) return 0;
    for (int i = 2; i <= sqrt(num); i++) {
        if (num % i == 0) return 0;
    }
    return 1;
}

// Function to generate a random prime number between min and max
int generate_prime(int min, int max) {
    int num;
    do {
        num = rand() % (max - min + 1) + min;
    } while (!is_prime(num));
    return num;
}

int main() {
    // Initialize random seed
    srand(time(NULL));

    // Step 1: Generate RSA keys
    int p = generate_prime(50, 100); // Generate a random prime number
    int q = generate_prime(50, 100); // Generate another random prime number
    int n = p * q; // Compute n
    int phi_n = (p - 1) * (q - 1); // Compute phi(n)

    // Step 2: Choose a public exponent e
    int e;
    do {
        e = rand() % (phi_n - 2) + 2; // e must be between 2 and phi(n) - 1
    } while (gcd(e, phi_n) != 1); // e must be coprime to phi(n)

    // Step 3: Compute private key d
    int d = mod_inverse(e, phi_n);
    if (d == -1) {
        printf("Failed to find the modular inverse.\n");
        return 1;
    }

    // Display the generated RSA keys
    printf("Generated RSA Keys:\n");
    printf("p = %d, q = %d\n", p, q);
    printf("n = %d\n", n);
    printf("phi(n) = %d\n", phi_n);
    printf("Public Key (e, n) = (%d, %d)\n", e, n);
    printf("Private Key (d, n) = (%d, %d)\n", d, n);

    // Step 4: Encrypt a message
    int plaintext = 1234;
    printf("\nOriginal Message: %d\n", plaintext);
    long long int ciphertext = mod_exp(plaintext, e, n);
    printf("Encrypted Message (Ciphertext): %lld\n", ciphertext);

    // Step 5: Decrypt the message
    int decrypted_message = mod_exp(ciphertext, d, n);
    printf("Decrypted Message: %d\n", decrypted_message);

    return 0;
}
