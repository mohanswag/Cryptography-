#include <stdio.h>

// Key for S-DES (10 bits)
unsigned short sdes_key = 0x1FD;    // Binary key: 01111 1101

// Initial Counter for CTR mode
unsigned char counter = 0x00;       // Binary counter: 0000 0000

// S-DES S-boxes
unsigned char sbox0[4][4] = {
    {1, 0, 3, 2},
    {3, 2, 1, 0},
    {0, 2, 1, 3},
    {3, 1, 3, 2}
};

unsigned char sbox1[4][4] = {
    {0, 1, 2, 3},
    {2, 0, 1, 3},
    {3, 0, 1, 0},
    {2, 1, 0, 3}
};

// S-DES Key schedule
void generate_keys(unsigned short key, unsigned char *k1, unsigned char *k2) {
    unsigned char temp, t1, t2;

    // Permuted Choice 1
    temp = ((key >> 1) & 0x1E);  // 0111 1110
    temp |= (key & 0x01);       // 0111 1111

    // Shift left
    t1 = (temp & 0x1F) << 1;    // Left shift 5 bits
    t2 = (temp >> 4) & 0x0F;    // Right shift 5 bits

    // Permuted Choice 2
    *k1 = (t1 & 0x3C) | ((t2 >> 1) & 0x03); // 4 bits
    *k2 = ((t1 & 0x03) << 3) | (t2 & 0x07); // 4 bits
}

// S-DES permutation P4
unsigned char permute_p4(unsigned char input) {
    return ((input & 0x02) << 1) | ((input & 0x08) >> 1) | (input & 0x05);
}

// S-DES round function
unsigned char sdes_round(unsigned char input, unsigned char key) {
    unsigned char expanded, sbox_input, sbox_output, p4_output;

    // Expansion Permutation
    expanded = ((input & 0x08) << 1) | (input & 0x0F);

    // XOR with key
    sbox_input = expanded ^ key;

    // S-boxes
    sbox_output = (sbox0[(sbox_input >> 2) & 0x03][sbox_input & 0x03] << 2) |
                  sbox1[(sbox_input >> 4) & 0x03][sbox_input >> 6];

    // Permutation P4
    p4_output = permute_p4(sbox_output);

    // Return output of round function
    return p4_output;
}

// S-DES encryption function in CTR mode
void sdes_encrypt_ctr(unsigned char plaintext[], unsigned char ciphertext[], int len) {
    unsigned char k1, k2, temp;

    // Generate keys
    generate_keys(sdes_key, &k1, &k2);

    // Encrypt each byte in CTR mode
    for (int i = 0; i < len; ++i) {
        // Generate pseudo-random value using counter
        temp = sdes_round(counter, k1);

        // XOR with plaintext to produce ciphertext
        ciphertext[i] = plaintext[i] ^ temp;

        // Increment counter for next round
        counter++;
    }
}

// S-DES decryption function in CTR mode (same as encryption)
void sdes_decrypt_ctr(unsigned char ciphertext[], unsigned char decryptedtext[], int len) {
    sdes_encrypt_ctr(ciphertext, decryptedtext, len); // Decryption is the same as encryption in CTR mode
}

// Function to print binary data
void print_binary(unsigned char data[], int len) {
    for (int i = 0; i < len; ++i) {
        for (int j = 7; j >= 0; --j) {
            printf("%d", (data[i] >> j) & 0x01);
            if (j == 4) printf(" "); // add a space between nibbles
        }
        printf(" ");
    }
    printf("\n");
}

int main() {
    unsigned char plaintext[] = { 0x12, 0x44, 0x82 }; // Binary plaintext: 0000 0001 0000 0010 0000 0100
    unsigned char ciphertext[3];
    unsigned char decryptedtext[3];

    // Encrypt using S-DES CTR mode
    sdes_encrypt_ctr(plaintext, ciphertext, sizeof(plaintext));

    // Print ciphertext in binary format
    printf("Ciphertext (Binary): ");
    print_binary(ciphertext, sizeof(ciphertext));

    // Decrypt using S-DES CTR mode
    sdes_decrypt_ctr(ciphertext, decryptedtext, sizeof(ciphertext));

    // Print decrypted text in binary format
    printf("Decrypted Text (Binary): ");
    print_binary(decryptedtext, sizeof(decryptedtext));

    return 0;
}
