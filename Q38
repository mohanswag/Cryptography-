#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <ctype.h>

// Function to calculate the greatest common divisor (gcd) of two numbers
int gcd(int a, int b) {
    if (b == 0)
        return a;
    return gcd(b, a % b);
}

// Function to find modular inverse of a number 'a' under modulo 'm'
// It returns '-1' if modular inverse doesn't exist
int modInverse(int a, int m) {
    a = a % m;
    for (int x = 1; x < m; x++)
        if ((a * x) % m == 1)
            return x;
    return -1;
}

// Function to encrypt using Hill cipher
void hill_encrypt(char *plaintext, int *key_matrix, int key_size) {
    int n = key_size; // Dimension of the key matrix
    int len = strlen(plaintext);
    int *plaintext_vec = (int *)malloc(n * sizeof(int));
    int *ciphertext_vec = (int *)malloc(n * sizeof(int));

    // Convert plaintext to uppercase
    for (int i = 0; i < len; i++) {
        plaintext[i] = toupper(plaintext[i]);
    }

    // Encrypt each block of plaintext
    for (int i = 0; i < len; i += n) {
        // Convert plaintext block to numerical vector
        for (int j = 0; j < n; j++) {
            plaintext_vec[j] = plaintext[i + j] - 'A';
        }

        // Multiply plaintext vector by key matrix (mod 26)
        for (int j = 0; j < n; j++) {
            ciphertext_vec[j] = 0;
            for (int k = 0; k < n; k++) {
                ciphertext_vec[j] += key_matrix[j * n + k] * plaintext_vec[k];
            }
            ciphertext_vec[j] %= 26; // Modulo 26 arithmetic
            if (ciphertext_vec[j] < 0)
                ciphertext_vec[j] += 26; // Ensure positive result
        }

        // Convert ciphertext vector back to characters and update plaintext
        for (int j = 0; j < n; j++) {
            plaintext[i + j] = ciphertext_vec[j] + 'A';
        }
    }

    free(plaintext_vec);
    free(ciphertext_vec);
}

// Function to decrypt using Hill cipher
void hill_decrypt(char *ciphertext, int *key_matrix, int key_size) {
    int n = key_size; // Dimension of the key matrix
    int len = strlen(ciphertext);
    int *ciphertext_vec = (int *)malloc(n * sizeof(int));
    int *plaintext_vec = (int *)malloc(n * sizeof(int));

    // Decrypt each block of ciphertext
    for (int i = 0; i < len; i += n) {
        // Convert ciphertext block to numerical vector
        for (int j = 0; j < n; j++) {
            ciphertext_vec[j] = ciphertext[i + j] - 'A';
        }

        // Find modular inverse of the key matrix
        // Calculate determinant of key matrix
        int determinant = key_matrix[0] * (key_matrix[4] * key_matrix[8] - key_matrix[7] * key_matrix[5])
                        - key_matrix[1] * (key_matrix[3] * key_matrix[8] - key_matrix[6] * key_matrix[5])
                        + key_matrix[2] * (key_matrix[3] * key_matrix[7] - key_matrix[6] * key_matrix[4]);

        determinant = (determinant % 26 + 26) % 26; // Ensure positive determinant

        // Check if determinant has modular inverse
        int inv_det = modInverse(determinant, 26);
        if (inv_det == -1) {
            printf("Modular inverse of determinant does not exist. Decryption not possible.\n");
            return;
        }

        // Find adjugate matrix (transpose of cofactor matrix)
        int adj[9];
        adj[0] = key_matrix[4] * key_matrix[8] - key_matrix[5] * key_matrix[7];
        adj[1] = key_matrix[2] * key_matrix[7] - key_matrix[1] * key_matrix[8];
        adj[2] = key_matrix[1] * key_matrix[5] - key_matrix[2] * key_matrix[4];
        adj[3] = key_matrix[5] * key_matrix[6] - key_matrix[3] * key_matrix[8];
        adj[4] = key_matrix[0] * key_matrix[8] - key_matrix[2] * key_matrix[6];
        adj[5] = key_matrix[2] * key_matrix[3] - key_matrix[0] * key_matrix[5];
        adj[6] = key_matrix[3] * key_matrix[7] - key_matrix[4] * key_matrix[6];
        adj[7] = key_matrix[1] * key_matrix[6] - key_matrix[0] * key_matrix[7];
        adj[8] = key_matrix[0] * key_matrix[4] - key_matrix[1] * key_matrix[3];

        for (int j = 0; j < 9; j++) {
            adj[j] = adj[j] % 26;
            if (adj[j] < 0)
                adj[j] += 26;
        }

        // Multiply adjugate matrix by modular inverse of determinant
        for (int j = 0; j < 9; j++) {
            adj[j] = (inv_det * adj[j]) % 26;
            if (adj[j] < 0)
                adj[j] += 26;
        }

        // Calculate inverse key matrix
        int inv_key_matrix[9];
        inv_key_matrix[0] = adj[0];
        inv_key_matrix[1] = adj[3];
        inv_key_matrix[2] = adj[6];
        inv_key_matrix[3] = adj[1];
        inv_key_matrix[4] = adj[4];
        inv_key_matrix[5] = adj[7];
        inv_key_matrix[6] = adj[2];
        inv_key_matrix[7] = adj[5];
        inv_key_matrix[8] = adj[8];

        // Multiply ciphertext vector by inverse key matrix (mod 26)
        for (int j = 0; j < n; j++) {
            plaintext_vec[j] = 0;
            for (int k = 0; k < n; k++) {
                plaintext_vec[j] += inv_key_matrix[j * n + k] * ciphertext_vec[k];
            }
            plaintext_vec[j] %= 26; // Modulo 26 arithmetic
            if (plaintext_vec[j] < 0)
                plaintext_vec[j] += 26; // Ensure positive result
        }

        // Convert plaintext vector back to characters and update ciphertext
        for (int j = 0; j < n; j++) {
            ciphertext[i + j] = plaintext_vec[j] + 'A';
        }
    }

    free(ciphertext_vec);
    free(plaintext_vec);
}

int main() {
    // Key matrix for Hill cipher (3x3)
    int key_matrix[9] = {6, 24, 1, 13, 16, 10, 20, 17, 15};

    // Example plaintext and ciphertext
    char plaintext[] = "HELLOWORLD";
    char ciphertext[100];

    // Encrypt plaintext
    hill_encrypt(plaintext, key_matrix, 3);
    printf("Encrypted ciphertext: %s\n", plaintext);

    // Decrypt ciphertext
    hill_decrypt(plaintext, key_matrix, 3);
    printf("Decrypted plaintext: %s\n", plaintext);

    return 0;
}
