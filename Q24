#include <stdio.h>

// Function to calculate gcd of two numbers using Euclidean algorithm
int gcd(int a, int b) {
    int temp;
    while (b != 0) {
        temp = b;
        b = a % b;
        a = temp;
    }
    return a;
}

// Function to calculate modular exponentiation (base^exp % mod)
long long int mod_exp(long long int base, int exp, int mod) {
    long long int result = 1;
    while (exp > 0) {
        if (exp % 2 == 1) {
            result = (result * base) % mod;
        }
        base = (base * base) % mod;
        exp /= 2;
    }
    return result;
}

// Function to find modular inverse using extended Euclidean algorithm
int mod_inverse(int e, int phi_n) {
    int d = 0, x1 = 0, x2 = 1, y1 = 1, temp_phi = phi_n;
    while (e > 0) {
        int temp1 = temp_phi / e, temp2 = temp_phi - temp1 * e;
        temp_phi = e, e = temp2;
        int x = x2 - temp1 * x1, y = d - temp1 * y1;
        x2 = x1, x1 = x, d = y, y1 = y;
    }
    return d < 0 ? d + phi_n : d;
}

int main() {
    // Given public key parameters
    int e = 31, n = 3599;

    // Step 1: Find p and q
    int p = 59, q = 61; // Since 59 * 61 = 3599

    // Step 2: Calculate phi_n
    int phi_n = (p - 1) * (q - 1);

    // Step 3: Find private key d using extended Euclidean algorithm
    int d = mod_inverse(e, phi_n);

    // Output the private key d
    printf("Private key (d): %d\n", d);

    return 0;
}
